generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(uuid()) @db.Uuid
  name            String?      @db.VarChar(255)
  email           String?      @unique @db.VarChar(255)
  emailVerified   DateTime?
  image           String?      @db.Text
  accounts        Account[]
  sessions        Session[]
  teamMemberships TeamMember[]
  event           Event[]
  createdAt       DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime     @default(now()) @updatedAt @db.Timestamptz(3)
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.VarChar(255)
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.VarChar(255)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @db.VarChar(255)
  userId       String   @db.Uuid
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)
}

model VerificationToken {
  identifier String   @db.VarChar(255)
  token      String   @unique @db.Uuid
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  members  TeamMember[]
  projects Project[]
}

model TeamMember {
  id        String   @id @default(uuid()) @db.Uuid
  teamId    String   @db.Uuid
  userId    String   @db.Uuid
  role      String   @db.VarChar(255) // 'owner', 'member', etc.
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Project {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(255)
  teamId    String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  events    Event[]
}

model Event {
  id          String   @id @default(uuid()) @db.Uuid
  title       String   @db.VarChar(255)
  eventDate   DateTime @default(now()) @db.Timestamptz(3)
  description String   @db.Text
  projectId   String   @db.Uuid
  userId      String   @db.Uuid
  attachments Json?

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
